import { useEffect, useState } from "react";
import Board2 from "../Board/Board2"; 
import handleMemoClick2 from "../components/memoClick2";
import { animalEmojis, animalEmojisLevel2 } from "../Data/data";

export const metadata = {
  title: 'Memory Game Online',
  description: 'Generated by create next app',
  developer: "Lucas Katz",
  keywords: "games - school - English - vocabulary"
}

const Animals2 = () => {
  const [shuffledAnimals, setShuffledAnimals] = useState([]);
  const [selectedMemoBlock, setselectedMemoBlock] = useState(null);
  const [animating, setAnimating] = useState(0); 
  const [comparing, setComparing] = useState(false); 
  const [selectedLevel, setSelectedLevel] = useState(1);

  useEffect(() => {
    let selectedArray;
    switch (selectedLevel) {
      case 1:
        // Reduce el array a la mitad y luego lo duplica para el nivel 1
        selectedArray = animalEmojisLevel2.slice(0, animalEmojisLevel2.length / 2)
                          .concat(animalEmojisLevel2.slice(0, animalEmojisLevel2.length / 2)); 
        break;
      case 2:
        selectedArray = animalEmojisLevel2.concat(animalEmojisLevel2)
        break;
      case 3:
      default:
        selectedArray = animalEmojis; // Usa el array original para el nivel 3 o por defecto
        break;
    }

    const shuffledArray = [...selectedArray];
    for (let i = shuffledArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
    }
    const formattedArray = shuffledArray.map((item, i) => ({ index: i, ...item, flipped: false }));
    setShuffledAnimals(formattedArray);
  }, [selectedLevel]);

  const handleClick = (memoBlock) => {
    if (comparing) {
      return;
    }

    if (animating < 2) {
      handleMemoClick2(
        memoBlock,
        shuffledAnimals,
        setShuffledAnimals,
        selectedMemoBlock,
        setselectedMemoBlock,
        animating,
        setAnimating,
        comparing,
        setComparing,
        animalEmojis
      );
    }
  };

  return (
    <Board2 memoryCard={shuffledAnimals} handleClick={handleClick} />
  );
}

export default Animals2;

